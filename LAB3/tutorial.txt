General-Purpose Registers
------------------------- 

64-bit  32-bit  16-bit  8-bit(high/low)  Purpose / Usage
RAX     EAX     AX      AH/AL            Accumulator; arithmetic, logic, I/O
RBX     EBX     BX      BH/BL            Base; data storage, memory addressing
RCX     ECX     CX      CH/CL            Counter for loops, string operations
RDX     EDX     DX      DH/DL            I/O, multiplication/division
RSI     ESI     SI      SIL              Source index for string/data operations
RDI     EDI     DI      DIL              Destination index for string/data operations
RBP     EBP     BP      —                Base pointer for stack frames
RSP     ESP     SP      —                Stack pointer
R8–R15  R8D–    R8W–    R8B–R15B         Additional general-purpose registers (64-bit only)
        R15D    R15W 



Data Movement Instructions
--------------------------

Instruction         Syntax          Purpose
mov dest, src       mov rax, rbx    Copies data from src to dest. Can be register, memory, or immediate.
push reg/mem        push rbp        Pushes value onto stack; decrements rsp by 8 (64-bit).
pop reg             pop rbp         Pops value from stack into register; increments rsp by 8.



Arithmetic Instructions
-----------------------

Instruction         Syntax          Purpose
add dest, src       add rax, rbx    Adds src to dest and stores result in dest.
sub dest, src       sub rax, rbx    Subtracts src from dest.
mul src             mul rbx         Unsigned multiply rax * src. Result stored in rdx:rax.
imul src            imul rbx        Signed multiply. Can store result in rax or another register.
div src             div rbx         Unsigned divide rdx:rax / src. Quotient → rax, remainder → rdx.
idiv src            idiv rbx        Signed division.

cmd: nasm -f elf64 hello.asm && gcc -no-pie -o hello hello.o && ./hello
ext: section .note.GNU-stack noalloc noexec nowrite progbits

je / jz → jump if equal / zero

jne / jnz → jump if not equal / not zero

Unsigned Comparisons

ja / jnbe → jump if above ( > )

jae / jnb → jump if above or equal ( ≥ )

jb / jnae → jump if below ( < )

jbe / jna → jump if below or equal ( ≤ )

Signed Comparisons

jg / jnle → jump if greater ( > )

jge / jnl → jump if greater or equal ( ≥ )

jl / jnge → jump if less ( < )

jle / jng → jump if less or equal ( ≤ )

Special Flags

jc → jump if carry

jnc → jump if not carry

jo → jump if overflow

jno → jump if not overflow

js → jump if sign set (negative)

jns → jump if not sign (non-negative)

jp / jpe → jump if parity even

jnp / jpo → jump if parity odd

Loop Instructions (with ECX counter)

loop label → decrements ecx, jumps if not zero

loope / loopz label → loop while ecx != 0 and ZF=1

loopne / loopnz label → loop while ecx != 0 and ZF=0

